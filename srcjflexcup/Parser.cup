/* Preliminaries to set up and use the scanner.  */
package generated;
import java_cup.runtime.*;
import java_cup.runtime.ComplexSymbolFactory.ComplexSymbol;
import java.util.*;
import syntax.*;
import syntax.statements.*;
import syntax.expression.*;
import syntax.expression.binary.arithmetic.*;
import syntax.expression.binary.relation.*;
import syntax.expression.unary.*;
import syntax.expression.constant.*;
import syntax.types.*;


class Parser;

parser code{:

private boolean debug = false;

public Parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf, boolean debug) {
    super(s,sf);
    this.debug = debug;
}

public void report_error(String message, Object info) {
  if (info instanceof ComplexSymbol) {
     ComplexSymbol cs = (ComplexSymbol)info;
     String msg = String.format("%s for input symbol %s (L:%s, C:%s)", message, cs.getName(), cs.getLeft().getLine(), cs.getRight().getColumn());
     System.err.println(msg);
   } else {
     System.err.println(message);
   }

}

protected void report_expected_token_ids() {
    List<Integer> ids = this.expected_token_ids();
    ArrayList<String> list = new  ArrayList<>();
    for (Integer id : ids){
      list.add(this.symbl_name_from_id(id));
    }
    System.err.println("instead expected token classes are " + list);
  }

private void log(String message){
    if(this.debug)
        System.out.println("\nLOG -> "+ message);
}

:}

/*Terminal*/
terminal String IF,
                THEN,
                ELSE,
                FUNCTION,
                MAIN,
                END,
                GLOBAL,
                LOCAL,
                NIL,
                FOR,
                WHILE,
                DO,
                RETURN,
                ID,
                INT,
                FLOAT,
                BOOL,
                STRING,
                STRING_CONST,
                LT,
                LE,
                EQ,
                NE,
                GT,
                GE,
                ASSIGN,
                ARROW,
                PLUS,
                MINUS,
                TIMES,
                DIV,
                AND,
                OR,
                NOT,
                SHARP,
                NOP,
                READ,
                WRITE,
                LPAR,
                RPAR,
                BLPAR,
                BRPAR,
                SLPAR,
                SRPAR,
                COMMA,
                SEMI,
                COLON,
                UMINUS,
                HAT;
terminal int INT_CONST;
terminal float FLOAT_CONST;
terminal boolean  TRUE, FALSE;


/* Non terminals */

non terminal      Program         	        Program;
non terminal      Global                    Global;
non terminal      ArrayList<Function>       Functions;
non terminal      Function                  Def_fun;
non terminal      ArrayList<ParDecl>        Par_decls;
non terminal      ArrayList<VarDecl>        Var_decls;
non terminal      VarInitValue              Var_init_value;
non terminal      Type                      Type;
non terminal      ArrayList<Type>           Types ;
non terminal      ArrayList<Statement>      Statements ;
non terminal      Statement                 Stat ;
non terminal      ArrayList<Id>             Vars ;
non terminal      ArrayList<Expr>           Exprs ;
non terminal      Expr                      Expr ;

/* Precendeces (remove ambiguity and conflicts) in order of declaration */
precedence left PLUS, MINUS, OR;
precedence left TIMES, DIV, AND;
precedence nonassoc LT, LE, EQ, NE, GT, GE;
precedence left UMINUS, NOT, COMMA, SHARP;
precedence left SLPAR;
/* The grammar */

/* Implicit left (eg functions_xleft) arg indicates the character number from the start of file, this is very useful for error checking */

/* Program : Global Functions */
Program ::= Global:global_ Functions:functions_
            {:
                RESULT = new Program(functions_xleft, functions_xright, global_, functions_);
                log("Program : Global Functions");
            :}
;

/* Global : GLOBAL Var_decls END
| ε */

Global ::=  GLOBAL:global_ Var_decls:var_decls_ END
            {:
                RESULT = new Global(global_xleft, global_xright, var_decls_ );
                log("Global : GLOBAL Var_decls END");
            :}
            | //Epsilon
            {:
                log("Global : ε");
            :}

;
/* Functions : Def_fun Functions
 | Def_fun */

Functions ::=  Def_fun:def_fun_ Functions:functions_
            {:
                functions_.add(0, def_fun_);
                RESULT = functions_;
                log("Functions : Def_fun Functions");
            :}
            |
            Def_fun:def_fun_
            {:
                RESULT= new ArrayList<Function>();
                RESULT.add(0, def_fun_);
                log("Functions : Def_fun");
            :}
;
/* Def_fun : FUNCTION ID LPAR Par_decls RPAR COLON Type Statements END
           | FUNCTION ID LPAR RPAR COLON Type Statements END */

Def_fun ::=  FUNCTION:function_ ID:id_ LPAR Par_decls:par_decls_ RPAR COLON Type:type_ Statements:statements_ END
             {:
                RESULT = new Function(function_xleft, function_xright, new Variable(id_xleft, id_xright, id_), par_decls_, type_, statements_);
                log("Def_fun : FUNCTION ID LPAR Par_decls RPAR COLON Type Statements END");
             :}
             |
             FUNCTION:function_ ID:id_ LPAR RPAR COLON Type:type_ Statements:statements_ END
             {:
                RESULT = new Function(function_xleft, function_xright, new Variable(id_xleft, id_xright, id_), type_, statements_);
                log("Def_fun : FUNCTION ID LPAR RPAR COLON Type Statements END");
             :}
;
/* Par_decls : ID COLON Type COMMA Par_decls
             | ID COLON Type */

Par_decls ::= ID:id_ COLON Type:type_ COMMA Par_decls:par_decls_
              {:
                par_decls_.add(0, new ParDecl(id_xleft, id_xright, new Variable(id_xleft, id_xright, id_), type_));
                RESULT = par_decls_;
                log("Par_decls : ID COLON Type COMMA Par_decls");
              :}
              |
              ID:id_ COLON Type:type_
              {:
                RESULT = new ArrayList<ParDecl>();
                RESULT.add(0, new ParDecl(id_xleft, id_xright, new Variable(id_xleft, id_xright, id_), type_));
                log("Par_decls : ID COLON Type");
              :}
;
/* Var_decls : ID COLON Type Var_init_value SEMI Var_decls
             | ID COLON Type Var_init_value */

Var_decls ::= Var_decls:var_decls_ SEMI ID:id_ COLON Type:type_ Var_init_value:var_init_value_
              {:
                var_decls_.add(0, new VarDecl(id_xleft, id_xright, new Variable(id_xleft, id_xright, id_), type_, var_init_value_));
                RESULT = var_decls_;
                log("Var_decls : ID COLON Type Var_init_value SEMI Var_decls");
              :}
              |
              ID:id_ COLON Type:type_ Var_init_value:var_init_value_
              {:
                RESULT = new ArrayList<VarDecl>();
                RESULT.add(0, new VarDecl(id_xleft, id_xright, new Variable(id_xleft, id_xright, id_), type_, var_init_value_));
                log("Var_decls : ID COLON Type Var_init_value");
              :}
;
/* Var_init_value : ASSIGN Expr
   | ε */

Var_init_value ::= ASSIGN Expr:expr_
               {:
                 RESULT = new VarInitValue(expr_xleft, expr_xright, expr_);
                 log("Var_init_value : ASSIGN Expr");
               :}
               | //Epsilon
               {:
                 log("Var_init_value : ε");
               :}
;
/* Type : NIL | INT | BOOL | FLOAT | STRING
        | BLPAR Type BRPAR
        | LPAR Types RPAR ARROW Type
        | LPAR RPAR ARROW Type */
Type ::= NIL:nil_
        {:
            RESULT= new PrimitiveType(nil_xleft, nil_xright, "NIL");
            log("Type : NIL");
        :}
        |
        INT:int_
        {:
            RESULT= new PrimitiveType(int_xleft, int_xright, "INT");
            log("Type : INT");
        :}
        |
       BOOL:bool_
        {:
           RESULT= new PrimitiveType(bool_xleft, bool_xright, "BOOL");
           log("Type : BOOL");
        :}
       |
       FLOAT:float_
        {:
           RESULT= new PrimitiveType(float_xleft, float_xright, "FLOAT");
           log("Type : FLOAT");
        :}
       |
       FLOAT:float_ SLPAR:slpar_ INT_CONST:int_ SRPAR
        {:
           PrimitiveType type_= new PrimitiveType(float_xleft, float_xright, "FLOAT");
           RESULT= new ArrayFloatType(slpar_xleft, slpar_xright, type_, int_);
           log("Type : FLOAT SLPAR INT_CONST SRPAR");
        :}
       |
       STRING:string_
        {:
           RESULT= new PrimitiveType(string_xleft, string_xright, "STRING");
           log("Type : STRING");
        :}
       |
       BLPAR:blpar_ Type:type_ BRPAR
        {:
           RESULT= new ArrayType(blpar_xleft, blpar_xright, type_);
           log("Type : BLPAR Type BRPAR");
        :}
        |
       LPAR:lpar_ Types:types_ RPAR ARROW Type:type_
        {:
           RESULT= new FunctionType(lpar_xleft, lpar_xright, types_, type_);
           log("Type : LPAR Types RPAR ARROW Type");
        :}
        |
        LPAR:lpar_ RPAR ARROW Type:type_
        {:
           RESULT= new FunctionType(lpar_xleft, lpar_xright, type_);
           log("Type : LPAR RPAR ARROW Type");
        :}
;
/* Types : Type COMMA Types
         | Type */
Types ::= Type:type_ COMMA Types:types_
          {:
            types_.add(0, type_);
            RESULT = types_;
            log("Types : Type COMMA Types");
          :}
          |
          Type:type_
          {:
            RESULT = new ArrayList<Type>();
            RESULT.add(0, type_);
            log("Types : Type");
          :}
;
/* Statements : Stat SEMI Statements
   | Stat */

Statements ::= Stat:stat_ SEMI Statements:statements_
            {:
                statements_.add(0, stat_);
                RESULT = statements_;
                log("Statements : Stat SEMI Statements");
            :}
            |
            Stat:stat_
            {:
                RESULT = new ArrayList<Statement>();
                RESULT.add(0, stat_);
                log("Statements : Stat");
            :}
;

/* Stat : NOP
        | WHILE Expr DO Statements END
        | IF Expr THEN Statements ELSE Statements END
        | IF Expr THEN Statements END
        | FOR ID ASSIGN Expr COMMA Expr DO Statements END
        | LOCAL Var_decls SEMI Statements END
        | ID ASSIGN Expr
        | Expr SLPAR Expr SRPAR ASSIGN Expr
        | ID LPAR Exprs RPAR
        | Vars READ
        | Exprs WRITE
        | RETURN Expr */

Stat ::= NOP:nop_
     {:
        RESULT= new NopStatement(nop_xleft, nop_xright);
        log("Stat : NOP");
     :}
     |
     WHILE:while_ Expr:expr_ DO Statements:statements_ END
     {:
        RESULT = new WhileStatement(while_xleft, while_xright, expr_, statements_);
        log("Stat : WHILE Expr DO Statements END");
     :}
     |
     IF:if_ Expr:expr_ THEN Statements:statements_ ELSE Statements:else_statements_ END
     {:
       RESULT = new IfElseStatement(if_xleft, if_xright, expr_, statements_, else_statements_ );
       log("Stat : IF Expr THEN Statements ELSE Statements END");
     :}
     |
     IF:if_ Expr:expr_ THEN Statements:statements_ END
     {:
        RESULT = new IfStatement(if_xleft, if_xright, expr_, statements_);
        log("Stat : IF Expr THEN Statements END");
     :}
     |
     FOR:for_ ID:id_ ASSIGN Expr:init_expression_ COMMA Expr:condition_expression_ DO Statements:statements_ END
     {:
        RESULT = new ForStatement(for_xleft, for_xright, new Variable(id_xleft, id_xright, id_), init_expression_, condition_expression_, statements_);
        log("Stat : FOR ID ASSIGN Expr COMMA Expr DO Statements END");
     :}
     |
     LOCAL:local_ Var_decls:var_decls_ SEMI Statements:statements_ END
     {:
        RESULT = new LocalStatement(local_xleft, local_xright, var_decls_, statements_);
        log("Stat : LOCAL Var_decls SEMI Statements END");
     :}
     | ID:id_ ASSIGN Expr:expr_
     {:
        RESULT = new AssignStatement(id_xleft, id_xright, new Id(id_xleft, id_xright, id_), expr_);
        log("Stat : ID ASSIGN Expr");
     :}
     |
     ID:id1_ ASSIGN HAT ID:id2_
     {:
        RESULT = new AssignFloatArrayStatement(id1_xleft, id1_xright, new Id(id1_xleft, id1_xright, id1_), new Id(id2_xleft, id2_xright, id2_));
        log("Stat : ID ASSIGN HAT ID");
     :}
     |
     Expr:expr_name_ SLPAR Expr:expr_index_ SRPAR ASSIGN Expr:expr_
     {:
        RESULT = new ArrayAssignStatement(expr_name_xleft, expr_name_xright, expr_name_, expr_index_, expr_);
        log("Stat : Expr SLPAR Expr SRPAR ASSIGN Expr");
     :}
     |
     ID:id_ LPAR Exprs:exprs_ RPAR
     {:
        RESULT = new CallFunctionStatement(id_xleft, id_xright, new Id(id_xleft, id_xright, id_), exprs_);
        log("Stat : ID LPAR Exprs RPAR");
     :}
     |
     ID:id_ LPAR RPAR
     {:
        RESULT = new CallFunctionStatement(id_xleft, id_xright, new Id(id_xleft, id_xright, id_));
        log("Stat : ID LPAR RPAR");
     :}
     |
     Vars:vars_ READ
     {:
        RESULT = new ReadStatement(vars_xleft, vars_xright, vars_);
        log("Stat : Vars READ");
     :}
     |
     Exprs:exprs_ WRITE
     {:
        RESULT = new WriteStatement(exprs_xleft, exprs_xright, exprs_);
        log("Stat : Exprs WRITE");
     :}
     |
     RETURN:return_ Expr:expr_
     {:
        RESULT = new ReturnStatement(return_xleft, return_xright, expr_);
        log("Stat : RETURN Expr");
     :}
     |
     error:error_
      {:
        System.out.println("left: " + error_xleft + " right: " + error_xright);
        log("Stat : error");
      :}
;
/* Vars : ID COMMA Vars
        | ID */
Vars ::= ID:id_ COMMA Vars:vars_
        {:
            vars_.add(0, new Id(id_xleft, id_xright, id_));
            RESULT= vars_;
            log("Vars : ID COMMA Vars");
        :}
        |
        ID:id_
        {:
            RESULT = new ArrayList<Id>();
            RESULT.add(0, new Id(id_xleft,id_xright , id_));
            log("Vars : ID");
        :}
;

/* Exprs : Expr COMMA Exprs
         | Expr */

Exprs ::= Expr:expr_ COMMA Exprs:exprs_
         {:
            exprs_.add(0, expr_);
            RESULT = exprs_;
            log("Exprs : Expr COMMA Exprs");
        :}
         |
         Expr:expr_
         {:
            RESULT = new ArrayList<Expr>();
            RESULT.add(0, expr_);
            log("Exprs : Expr");
        :}
;

/* Expr : NIL
       | TRUE
       | FALSE
       | INT_CONST
       | FLOAT_CONST
       | STRING_CONST
       | BLPAR BRPAR COLON Type
       | ID
       | Expr SLPAR Expr SRPAR
       | ID LPAR Exprs RPAR
       | Expr PLUS Expr
       | Expr MINUS Expr
       | Expr TIMES Expr
       | Expr DIV Expr
       | Expr AND Expr
       | Expr OR Expr
       | Expr GT Expr
       | Expr GE Expr
       | Expr LT Expr
       | Expr LE Expr
       | Expr EQ Expr
       | Expr NE Expr
       | MINUS Expr
       | NOT Expr
       | SHARP Expr  */

Expr ::= NIL:nil_
        {:
            RESULT = new NilConst(nil_xleft, nil_xright);
            log("Expr : NIL");
        :}
        |
        TRUE:true_
        {:
            RESULT = new BooleanConst(true_xleft, true_xright, true);
            log("Expr : TRUE");
        :}
        |
        FALSE:false_
        {:
            RESULT = new BooleanConst(false_xleft, false_xright, false);
            log("Expr : FALSE");
        :}
        |
        INT_CONST:int_
        {:
            RESULT = new IntegerConst(int_xleft, int_xright, int_);
            log("Expr : INT_CONST");
        :}
        |
        FLOAT_CONST:float_
        {:
            RESULT = new FloatConst(float_xleft, float_xright, float_);
            log("Expr : FLOAT_CONST");
        :}
        |
        STRING_CONST:string_
        {:
            RESULT = new StringConst(string_xleft,string_xright, string_);
            log("Expr : STRING_CONST");
        :}
        |
        BLPAR:blpar_ BRPAR COLON Type:type_
        {:
            RESULT = new ArrayConst(blpar_xleft, blpar_xright, type_);
            log("Expr : BLPAR BRPAR COLON Type");
        :}
        | ID:id_
        {:
            RESULT = new Id(id_xleft, id_xright , id_);
            log("Expr : ID");
        :}
        |
        Expr:expr_name_ SLPAR Expr:expr_ SRPAR
        {:
            RESULT = new ArrayReadElement(expr_name_xleft, expr_name_xright,  expr_name_, expr_);
            log("Expr : Expr SLPAR Expr SRPAR");
        :}
        |
        ID:id_ LPAR Exprs:exprs_ RPAR
        {:
            RESULT = new FunctionCall(id_xleft, id_xright, new Id(id_xleft, id_xright, id_), exprs_);
            log("Expr : ID LPAR Exprs RPAR");
        :}
        |
        ID:id_ LPAR RPAR
        {:
            RESULT = new FunctionCall(id_xleft, id_xright, new Id(id_xleft, id_xright, id_));
            log("Expr : ID LPAR RPAR");
        :}
        |
        Expr:expr1_ PLUS Expr:expr2_
        {:
            RESULT = new PlusOperation(expr1_xleft, expr1_xright, expr1_, expr2_);
            log("Expr : Expr PLUS Expr");
        :}
        |
        Expr:expr1_ MINUS Expr:expr2_
        {:
            RESULT = new MinusOperation(expr1_xleft, expr1_xright, expr1_, expr2_);
            log("Expr : Expr MINUS Expr");
        :}
        |
        Expr:expr1_ TIMES Expr:expr2_
        {:
            RESULT = new TimesOperation(expr1_xleft, expr1_xright, expr1_, expr2_);
            log("Expr : Expr TIMES Expr");
        :}
        |
        Expr:expr1_ DIV Expr:expr2_
        {:
            RESULT = new DivOperation(expr1_xleft, expr1_xright, expr1_, expr2_);
            log("Expr : Expr DIV Expr");
        :}
        |
        Expr:expr1_ AND Expr:expr2_
        {:
            RESULT = new AndRelOperation(expr1_xleft, expr1_xright, expr1_, expr2_);
            log("Expr : Expr AND Expr");
        :}
        |
        Expr:expr1_ OR Expr:expr2_
        {:
            RESULT = new OrRelOperation(expr1_xleft, expr1_xright, expr1_, expr2_);
            log("Expr : Expr OR Expr");
        :}
        |
        Expr:expr1_ GT Expr:expr2_
        {:
            RESULT = new GreatThanRelOperation(expr1_xleft, expr1_xright, expr1_, expr2_);
            log("Expr : Expr GT Expr");
        :}
        |
        Expr:expr1_ GE Expr:expr2_
        {:
            RESULT = new GreatThanEqualsRelOperation(expr1_xleft, expr1_xright, expr1_, expr2_);
            log("Expr : Expr GE Expr");
        :}
        |
        Expr:expr1_ LT Expr:expr2_
        {:
            RESULT = new LessThanRelOperation(expr1_xleft, expr1_xright, expr1_, expr2_);
            log("Expr : Expr LT Expr");
        :}
        |
        Expr:expr1_ LE Expr:expr2_
        {:
            RESULT = new LessThanEqualsRelOperation(expr1_xleft, expr1_xright, expr1_, expr2_);
            log("Expr : Expr LE Expr");
        :}
        |
        Expr:expr1_ EQ Expr:expr2_
        {:
            RESULT = new EqualsRelOperation(expr1_xleft, expr1_xright, expr1_, expr2_);
            log("Expr : Expr EQ Expr");
        :}
        |
        Expr:expr1_ NE Expr:expr2_
        {:
            RESULT = new NotEqualsRelOperation(expr1_xleft, expr1_xright, expr1_, expr2_);
            log("Expr : Expr NE Expr");
        :}
        |
        MINUS Expr:expr_
        {:
            RESULT = new UminusExpression(expr_xleft, expr_xright, expr_);
            log("Expr : MINUS Expr");
        :}
        %prec UMINUS
        |
        NOT Expr:expr_
        {:
            RESULT = new NotExpression(expr_xleft, expr_xright, expr_);
            log("Expr : NOT Expr");
        :}
        |
        SHARP Expr:expr_
        {:
            RESULT =new SharpExpression(expr_xleft, expr_xright, expr_);
            log("Expr : SHARP Expr");
        :}
;
