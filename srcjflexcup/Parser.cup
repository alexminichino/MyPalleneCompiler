/* Preliminaries to set up and use the scanner.  */
package generated;
import java_cup.runtime.*;
import java.util.*;
import syntax.*;
import syntax.statements.*;
import syntax.expression.*;
import syntax.expression.binary.arithmetic.*;
import syntax.expression.binary.relation.*;
import syntax.expression.unary.*;
import syntax.expression.constant.*;
import syntax.types.*;


class Parser;

parser code{:

public void report_error(String msg, Object info) {
  Symbol sym = (Symbol)info;
  System.out.println(msg + ": " + symbl_name_from_id(sym.sym));
}

public void syntax_error(Symbol cur_token) {
  System.out.println("Syntax error: " + symbl_name_from_id(cur_token.sym));
}

:}

/*Terminal*/
terminal String IF,
                THEN,
                ELSE,
                FUNCTION,
                MAIN,
                END,
                GLOBAL,
                LOCAL,
                NIL,
                FOR,
                WHILE,
                DO,
                RETURN,
                ID,
                INT,
                FLOAT,
                BOOL,
                STRING,
                STRING_CONST,
                LT,
                LE,
                EQ,
                NE,
                GT,
                GE,
                ASSIGN,
                ARROW,
                PLUS,
                MINUS,
                TIMES,
                DIV,
                AND,
                OR,
                NOT,
                SHARP,
                NOP,
                READ,
                WRITE,
                LPAR,
                RPAR,
                BLPAR,
                BRPAR,
                SLPAR,
                SRPAR,
                COMMA,
                SEMI,
                COLON,
                UMINUS;
terminal int INT_CONST;
terminal float FLOAT_CONST;
terminal boolean  TRUE, FALSE;


/* Non terminals */

non terminal      Program         	        Program;
non terminal      Global                    Global;
non terminal      ArrayList<Function>       Functions;
non terminal      Function                  Def_fun;
non terminal      ArrayList<ParDecl>        Par_decls;
non terminal      ArrayList<VarDecl>        Var_decls;
non terminal      VarInitValue              Var_init_value;
non terminal      Type                      Type;
non terminal      ArrayList<Type>           Types ;
non terminal      ArrayList<Statement>      Statements ;
non terminal      Statement                 Stat ;
non terminal      ArrayList<Id>             Vars ;
non terminal      ArrayList<Expr>           Exprs ;
non terminal      Expr                      Expr ;

/* Precendeces (remove ambiguity and conflicts) in order of declaration */
precedence left PLUS, MINUS, OR;
precedence left TIMES, DIV, AND;
precedence nonassoc LT, LE, EQ, NE, GT, GE;
precedence left UMINUS, NOT, COMMA, SHARP;

/* The grammar */

/* Implicit left (eg functions_left) arg indicates the character number from the start of file, this is very useful for error checking */

/* Program : Global Functions */
Program ::= Global:global_ Functions:functions_
            {:
                RESULT = new Program(functions_left, functions_right, global_, functions_);
            :}
;

/* Global : GLOBAL Var_decls END
| ε */

Global ::=  GLOBAL:global_ Var_decls:var_decls_ END
            {:
                RESULT = new Global(global_left, global_right, var_decls_ );
            :}
            |
            //Epsilon
;
/* Functions : Def_fun Functions
 | Def_fun */

Functions ::=  Def_fun:def_fun_ Functions:functions_
            {:
                functions_.add(def_fun_);
                RESULT = functions_;
            :}
            |
            Def_fun:def_fun_
            {:
                RESULT= new ArrayList<Function>();
                RESULT.add(def_fun_);
            :}
;
/* Def_fun : FUNCTION ID LPAR Par_decls RPAR COLON Type Statements END
           | FUNCTION ID LPAR RPAR COLON Type Statements END */

Def_fun ::=  FUNCTION:function_ ID:id_ LPAR Par_decls:par_decls_ RPAR COLON Type:type_ Statements:statements_ END
             {:
                RESULT = new Function(function_left, function_right, new Id(id_left, id_right, id_), par_decls_, type_, statements_);
             :}
             |
             FUNCTION:function_ ID:id_ LPAR RPAR COLON Type:type_ Statements:statements_ END
             {:
                RESULT = new Function(function_left, function_right, new Id(id_left, id_right, id_), type_, statements_);
             :}
;
/* Par_decls : ID COLON Type COMMA Par_decls
             | ID COLON Type */

Par_decls ::= ID:id_ COLON Type:type_ COMMA Par_decls:par_decls_
              {:
                par_decls_.add(new ParDecl(id_left, id_right, new Id(id_left, id_right, id_), type_));
                RESULT = par_decls_;
              :}
              |
              ID:id_ COLON Type:type_
              {:
                RESULT = new ArrayList<ParDecl>();
                RESULT.add(new ParDecl(id_left, id_right, new Id(id_left, id_right, id_), type_));
              :}
;
/* Var_decls : ID COLON Type Var_init_value SEMI Var_decls
             | ID COLON Type Var_init_value */

Var_decls ::= Var_decls:var_decls_ SEMI ID:id_ COLON Type:type_ Var_init_value:var_init_value_
              {:
                var_decls_.add(new VarDecl(id_left, id_right, new Id(id_left, id_right, id_), type_, var_init_value_));
                RESULT = var_decls_;
              :}
              |
              ID:id_ COLON Type:type_ Var_init_value:var_init_value_
              {:
                RESULT = new ArrayList<VarDecl>();
                RESULT.add(new VarDecl(id_left, id_right, new Id(id_left, id_right, id_), type_, var_init_value_));
              :}
;
/* Var_init_value : ASSIGN Expr
   | ε */

Var_init_value ::= ASSIGN Expr:expr_
               {:
                 RESULT = new VarInitValue(expr_left, expr_right, expr_);
               :}
               |
                //Epsilon
;
/* Type : NIL | INT | BOOL | FLOAT | STRING
        | BLPAR Type BRPAR
        | LPAR Types RPAR ARROW Type
        | LPAR RPAR ARROW Type */
Type ::= NIL:nil_
        {:
            RESULT= new PrimitiveType(nil_left, nil_right, "NIL");
        :}
        |
        INT:int_
        {:
            RESULT= new PrimitiveType(int_left, int_right, "INT");
        :}
        |
       BOOL:bool_
        {:
           RESULT= new PrimitiveType(bool_left, bool_right, "BOOL");
        :}
       |
       FLOAT:float_
        {:
           RESULT= new PrimitiveType(float_left, float_right, "FLOAT");
        :}
       |
       STRING:string_
        {:
           RESULT= new PrimitiveType(string_left, string_right, "STRING");
        :}
       |
       BLPAR:blpar_ Type:type_ BRPAR
        {:
           RESULT= new ArrayType(blpar_left, blpar_right, type_);
        :}
        |
       LPAR:lpar_ Types:types_ RPAR ARROW Type:type_
        {:
           RESULT= new FunctionType(lpar_left, lpar_right, types_, type_);
        :}
        |
        LPAR:lpar_ RPAR ARROW Type:type_
        {:
           RESULT= new FunctionType(lpar_left, lpar_right, type_);
        :}
;
/* Types : Type COMMA Types
         | Type */
Types ::= Type:type_ COMMA Types:types_
          {:
            types_.add(type_);
            RESULT = types_;
          :}
          |
          Type:type_
          {:
            RESULT = new ArrayList<Type>();
            RESULT.add(type_);
          :}
;
/* Statements : Stat SEMI Statements
   | Stat */

Statements ::= Stat:stat_ SEMI Statements:statements_
            {:
                statements_.add(stat_);
                RESULT = statements_;
            :}
            |
            Stat:stat_
            {:
                RESULT = new ArrayList<Statement>();
                RESULT.add(stat_);
            :}
;

/* Stat : NOP
        | WHILE Expr DO Statements END
        | IF Expr THEN Statements ELSE Statements END
        | IF Expr THEN Statements END
        | FOR ID ASSIGN Expr COMMA Expr DO Statements END
        | LOCAL Var_decls SEMI Statements END
        | ID ASSIGN Expr
        | Expr SLPAR Expr SRPAR ASSIGN Expr
        | ID LPAR Exprs RPAR
        | Vars READ
        | Exprs WRITE
        | RETURN Expr */

Stat ::= NOP:nop_
     {:
        RESULT= new NopStatement(nop_left, nop_right);
     :}
     |
     WHILE:while_ Expr:expr_ DO Statements:statements_ END
     {:
        RESULT = new WhileStatement(while_left, while_right, expr_, statements_);
     :}
     |
     IF:if_ Expr:expr_ THEN Statements:statements_ ELSE Statements:else_statements_ END
     {:
       RESULT = new IfElseStatement(if_left, if_right, expr_, statements_, else_statements_ );
     :}
     |
     IF:if_ Expr:expr_ THEN Statements:statements_ END
     {:
        RESULT = new IfStatement(if_left, if_right, expr_, statements_);
     :}
     |
     FOR:for_ ID:id_ ASSIGN Expr:init_expression_ COMMA Expr:condition_expression_ DO Statements:statements_ END
     {:
        RESULT = new ForStatement(for_left, for_right, new Id(id_left, id_right, id_), init_expression_, condition_expression_, statements_);
     :}
     |
     LOCAL:local_ Var_decls:var_decls_ SEMI Statements:statements_ END
     {:
        RESULT = new LocalStatement(local_left, local_right, var_decls_, statements_);
     :}
     | ID:id_ ASSIGN Expr:expr_
     {:
        RESULT = new AssignStatement(id_left, id_right, new Id(id_left, id_right, id_), expr_);
     :}
     |
     Expr:expr_name_ SLPAR Expr:expr_index_ SRPAR ASSIGN Expr:expr_
     {:
        RESULT = new ArrayAssignStatement(expr_name_left, expr_name_right, expr_name_, expr_index_, expr_);
     :}
     |
     ID:id_ LPAR Exprs:exprs_ RPAR
     {:
        RESULT = new CallFunctionStatement(id_left, id_right, new Id(id_left, id_right, id_), exprs_);
     :}
     |
     Vars:vars_ READ
     {:
        RESULT = new ReadStatement(vars_left, vars_right, vars_);
     :}
     |
     Exprs:exprs_ WRITE
     {:
        RESULT = new WriteStatement(exprs_left, exprs_right, exprs_);
     :}
     |
     RETURN:return_ Expr:expr_
     {:
        RESULT = new ReturnStatement(return_left, return_right, expr_);
     :}
     |
     error:error_
      {:
        System.out.println("left: " + error_left + " right: " + error_right);
      :}
;
/* Vars : ID COMMA Vars
        | ID */
Vars ::= ID:id_ COMMA Vars:vars_
        {:
            vars_.add(new Id(id_left, id_right, id_));
            RESULT= vars_;
        :}
        |
        ID:id_
        {:
            RESULT = new ArrayList<Id>();
            RESULT.add(new Id(id_left,id_right , id_));
        :}
;

/* Exprs : Expr COMMA Exprs
         | Expr */

Exprs ::= Expr:expr_ COMMA Exprs:exprs_
         {:
            exprs_.add(expr_);
            RESULT = exprs_;
        :}
         |
         Expr:expr_
         {:
            RESULT = new ArrayList<Expr>();
            RESULT.add(expr_);
        :}
;

/* Expr : NIL
       | TRUE
       | FALSE
       | INT_CONST
       | FLOAT_CONST
       | STRING_CONST
       | BLPAR BRPAR COLON Type
       | ID
       | Expr SLPAR Expr SRPAR
       | ID LPAR Exprs RPAR
       | Expr PLUS Expr
       | Expr MINUS Expr
       | Expr TIMES Expr
       | Expr DIV Expr
       | Expr AND Expr
       | Expr OR Expr
       | Expr GT Expr
       | Expr GE Expr
       | Expr LT Expr
       | Expr LE Expr
       | Expr EQ Expr
       | Expr NE Expr
       | MINUS Expr
       | NOT Expr
       | SHARP Expr  */

Expr ::= NIL:nil_
        {:
            RESULT = new NilConst(nil_left, nil_right);
        :}
        |
        TRUE:true_
        {:
            RESULT = new BooleanConst(true_left, true_right, true);
        :}
        |
        FALSE:false_
        {:
            RESULT = new BooleanConst(false_left, false_right, false);
        :}
        |
        INT_CONST:int_
        {:
            RESULT = new IntegerConst(int_left, int_right, int_);
        :}
        |
        FLOAT_CONST:float_
        {:
            RESULT = new FloatConst(float_left, float_right, float_);
        :}
        |
        STRING_CONST:string_
        {:
            RESULT = new StringConst(string_left,string_right, string_);
        :}
        |
        BLPAR:blpar_ BRPAR COLON Type:type_
        {:
            RESULT = new ArrayConst(blpar_left, blpar_right, type_);
        :}
        | ID:id_
        {:
            RESULT = new Id(id_left, id_right , id_);
        :}
        |
        Expr:expr_name_ SLPAR Expr:expr_ SRPAR
        {:
            RESULT = new ArrayReadElement(expr_name_left, expr_name_right,  expr_name_, expr_);
        :}
        |
        ID:id_ LPAR Exprs:exprs_ RPAR
        {:
            RESULT = new FunctionCall(id_left, id_right, new Id(id_left, id_right, id_), exprs_);
        :}
        |
        Expr:expr1_ PLUS Expr:expr2_
        {:
            RESULT = new PlusOperation(expr1_left, expr1_right, expr1_, expr2_);
        :}
        |
        Expr:expr1_ MINUS Expr:expr2_
        {:
            RESULT = new MinusOperation(expr1_left, expr1_right, expr1_, expr2_);
        :}
        |
        Expr:expr1_ TIMES Expr:expr2_
        {:
            RESULT = new TimesOperation(expr1_left, expr1_right, expr1_, expr2_);
        :}
        |
        Expr:expr1_ DIV Expr:expr2_
        {:
            RESULT = new DivOperation(expr1_left, expr1_right, expr1_, expr2_);
        :}
        |
        Expr:expr1_ AND Expr:expr2_
        {:
            RESULT = new AndRelOperation(expr1_left, expr1_right, expr1_, expr2_);
        :}
        |
        Expr:expr1_ OR Expr:expr2_
        {:
            RESULT = new OrRelOperation(expr1_left, expr1_right, expr1_, expr2_);
        :}
        |
        Expr:expr1_ GT Expr:expr2_
        {:
            RESULT = new GreatThanRelOperation(expr1_left, expr1_right, expr1_, expr2_);
        :}
        |
        Expr:expr1_ GE Expr:expr2_
        {:
            RESULT = new GreatThanEqualsRelOperation(expr1_left, expr1_right, expr1_, expr2_);
        :}
        |
        Expr:expr1_ LT Expr:expr2_
        {:
            RESULT = new LessThanRelOperation(expr1_left, expr1_right, expr1_, expr2_);
        :}
        |
        Expr:expr1_ LE Expr:expr2_
        {:
            RESULT = new LessThanEqualsRelOperation(expr1_left, expr1_right, expr1_, expr2_);
        :}
        |
        Expr:expr1_ EQ Expr:expr2_
        {:
            RESULT = new EqualsRelOperation(expr1_left, expr1_right, expr1_, expr2_);
        :}
        |
        Expr:expr1_ NE Expr:expr2_
        {:
            RESULT = new NotEqualsRelOperation(expr1_left, expr1_right, expr1_, expr2_);
        :}
        |
        MINUS Expr:expr_
        {:
            RESULT = new UminusExpression(expr_left, expr_right, expr_);
        :}
        %prec UMINUS
        |
        NOT Expr:expr_
        {:
            RESULT = new NotExpression(expr_left, expr_right, expr_);
        :}
        |
        SHARP Expr:expr_
        {:
            RESULT =new SharpExpression(expr_left, expr_right, expr_);
        :}
;
